{"version":3,"sources":["webpack:///./src/pages/components/Matrix.js","webpack:///./src/pages/index.js","webpack:///./src/pages/components/Result.js"],"names":["Matrix","data","Object","keys","map","col","i","key","row","correlation","x","y","xMean","reduce","acc","el","length","yMean","numerator","xDSquaredSum","yDSquaredSum","xd","yd","Home","useState","assets","setAssets","correlations","setCorrelations","covariances","setCovariances","useEffect","newCorrelations","j","symbol","returns","stdevs","asset","stdev","covariancesFromCorrelations","href","onAdd","found","newAssets","onRemove","filter","a","decimalFormatter","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","Result","risk","setRisk","total","amount","close","w","Ω","k","l","r","sum","format"],"mappings":"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","file":"component---src-pages-index-js-f81c7d3b102c482f748e.js","sourcesContent":["import React from 'react'\n\nexport default function Matrix({ data }) {\n  return (\n    <table>\n      <thead>\n        <tr>\n          <th>-</th>\n          {Object.keys(data).map((col, i) => (\n            <th key={`${data}-${i}`}>{col}</th>\n          ))}\n        </tr>\n      </thead>\n      <tbody>\n        {Object.keys(data).map((col, i) => (\n          <tr key={`${data}-${i}`}>\n            <th>{col}</th>\n            {Object.keys(data[col]).map((row, i) => (\n              <td key={`${row}-${i}`}>{data[col][row]}</td>\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport AssetList from './components/AssetList'\nimport Matrix from './components/Matrix'\nimport Result from './components/Result'\n\nfunction correlation(x, y) {\n  const xMean = x.reduce((acc, el) => el + acc, 0) / x.length\n  const yMean = y.reduce((acc, el) => el + acc, 0) / y.length\n  if (x.length !== y.length) return null\n  let numerator = 0,\n    xDSquaredSum = 0,\n    yDSquaredSum = 0\n\n  for (let i = 0; i < x.length; i++) {\n    const xd = x[i] - xMean\n    const yd = y[i] - yMean\n    numerator += xd * yd\n    xDSquaredSum += xd ** 2\n    yDSquaredSum += yd ** 2\n  }\n  return numerator / (xDSquaredSum * yDSquaredSum) ** 0.5\n}\n\nfunction covariancesFromCorrelations(correlations, stdevs) {\n  return Object.keys(correlations).reduce(\n    (acc, row) => ({\n      ...acc,\n      [row]: Object.keys(correlations[row]).reduce(\n        (acc, col) => ({\n          ...acc,\n          [col]: correlations[row][col] * stdevs[row] * stdevs[col],\n        }),\n        {}\n      ),\n    }),\n    {}\n  )\n}\n\nexport default function Home() {\n  const [assets, setAssets] = useState([])\n  const [correlations, setCorrelations] = useState({})\n  const [covariances, setCovariances] = useState({})\n\n  useEffect(() => {\n    const newCorrelations = {}\n    for (let i = 0; i < assets.length; i++) {\n      for (let j = 0; j < assets.length; j++) {\n        if (typeof newCorrelations[assets[i].symbol] === 'undefined') {\n          newCorrelations[assets[i].symbol] = {}\n        }\n        newCorrelations[assets[i].symbol][assets[j].symbol] = correlation(\n          assets[i].returns,\n          assets[j].returns\n        )\n      }\n    }\n    setCorrelations(newCorrelations)\n    const stdevs = assets.reduce(\n      (acc, asset) => ({ ...acc, [asset.symbol]: asset.stdev }),\n      {}\n    )\n    setCovariances(covariancesFromCorrelations(newCorrelations, stdevs))\n  }, [assets.length, assets])\n\n  return (\n    <div>\n      <h1>Markowitz calculator</h1>\n      <h4>\n        {' '}\n        Powered by <a href=\"https://oplab.com.br\">OpLab</a>\n      </h4>\n      <h2>Asset List</h2>\n      <AssetList\n        onAdd={asset => {\n          let found = false\n          const newAssets = [...assets]\n          for (let i = 0; i < newAssets.length; i++) {\n            if (newAssets[i].symbol === asset.symbol) {\n              found = true\n              newAssets[i] = asset\n              break\n            }\n          }\n          setAssets(found ? newAssets : [...assets, asset])\n        }}\n        onRemove={asset =>\n          setAssets(assets.filter(a => a.symbol !== asset.symbol))\n        }\n        assets={assets}\n      />\n      <h2>Correlations</h2>\n      <Matrix data={correlations} />\n      <h2>Covariations</h2>\n      <Matrix data={covariances} />\n      <Result assets={assets} covariances={covariances} />\n    </div>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nconst decimalFormatter = Intl.NumberFormat('pt-BR', {\n  maximumFractionDigits: 2,\n  minimumFractionDigits: 2,\n})\nexport default function Result({ assets, covariances }) {\n  const [risk, setRisk] = useState(0)\n  useEffect(() => {\n    if (assets.length > 1) {\n      const total = assets.reduce(\n        (acc, { amount, close }) => acc + amount * close,\n        0\n      )\n      const w = assets.map(({ amount, close }) => (amount * close) / total)\n      const Ω = Object.keys(covariances).map(k =>\n        Object.keys(covariances[k]).map(l => covariances[k][l])\n      )\n\n      let r = 0\n      for (let i = 0; i < w.length; i++) {\n        let sum = 0\n        for (let j = 0; j < w.length; j++) {\n          sum += Ω[i][j] * w[j]\n        }\n        r += sum * w[i]\n      }\n      setRisk(r ** 0.5)\n    } else setRisk(assets[0] ? assets[0].stdev : 0)\n  }, [covariances])\n  return (\n    <div>\n      <h2>Portfolio Risk</h2>\n      <p>σₚ={decimalFormatter.format(risk * 100)}%</p>\n    </div>\n  )\n}\n"],"sourceRoot":""}